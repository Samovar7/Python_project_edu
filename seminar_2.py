'''Задание №2
Создайте в переменной data список значений разных типов перечислив их через
запятую внутри квадратных скобок. Для каждого элемента в цикле выведите:
✔ порядковый номер начиная с единицы
✔ значение
✔ адрес в памяти
✔ размер в памяти
✔ хэш объекта
✔ результат проверки на целое число только если он положительный
✔ результат проверки на строку только если он положительный
Добавьте в список повторяющиеся элементы и сравните на результаты.


data = [7, 1.5, 'abs', True, None, b'12']

for i, el in enumerate(data, 1):
    print(f'{i}. {el}, {id(el)}, {el.__sizeof__()}, {hash(el)}')
    if type(el) == int and el > 0:
        print(f'Целое положительное число {el}')
    elif type(el) == str:
        print(f'Тип строка - {el}')
'''

'''
Задание №3
✔ Напишите программу, которая получает целое число и возвращает
его двоичное, восьмеричное строковое представление.
✔ Функции bin и oct используйте для проверки своего
результата, а не для решения.
Дополнительно:
✔ Попробуйте избежать дублирования кода
в преобразованиях к разным системам счисления
✔ Избегайте магических чисел
✔ Добавьте аннотацию типов где это возможно
'''
'''
num = 125
print(oct(num))
base = 8
res =''
while num > 0:
    res = str(num % base) + res
    num = num // base
print(res)
'''

'''
Задание №4
✔ Напишите программу, которая вычисляет площадь
круга и длину окружности по введённому диаметру.
✔ Диаметр не превышает 1000 у.е.
✔ Точность вычислений должна составлять
не менее 42 знаков после запятой.
'''
'''
import math
diametr = 18
l = diametr * math.pi
s_kruga = diametr**2/4 * math.pi
print(f'{l:.42f}, {s_kruga:.42f}')
'''

'''
Задание №5
✔ Напишите программу, которая решает
квадратные уравнения даже если
дискриминант отрицательный.
✔ Используйте комплексные числа
для извлечения квадратного корня.
'''
'''
from math import sqrt

a = 10
b = -50
c = 100

d = b ** 2 - 4 * a * c
if d > 0:
    x_1 = (-b + sqrt(d))(2 * a)
    x_2 = (-b - sqrt(d))(2 * a)
    print(x_1, x_2)
elif d == 0:
    x = -b / (2 * a)
    print(x)
else:
    real = round(-b / (2 * a), 4)
    imaginary = round(sqrt(abs(d)) / (2 * a), 4)
    x_1 = complex(real, imaginary)
    x_2 = complex(real, -imaginary)
    print(x_1, x_2)
'''

"""
Задание №6
Напишите программу банкомат.
✔ Начальная сумма равна нулю
✔ Допустимые действия: пополнить, снять, выйти
✔ Сумма пополнения и снятия кратны 50 у.е.
✔ Процент за снятие — 1.5% от суммы снятия, но не менее 30 и не более 600 у.е.
✔ После каждой третей операции пополнения или снятия начисляются проценты - 3%
✔ Нельзя снять больше, чем на счёте
✔ При превышении суммы в 5 млн, вычитать налог на богатство 10% перед каждой
операцией, даже ошибочной
✔ Любое действие выводит сумму денег
"""

s = 0
count_add = 0
count_out = 0
while True:
    action = input('Введите команду: ')
    if action == 'q':
        print('Выход из банкомата')
        break
    elif action == 'a':
        sum_add = int(input('Введите сумму пополнения: '))
        if s + sum_add > 5000000:
            s = s - sum_add * 0.1
        if sum_add % 50 == 0:
            s += sum_add
            count_add += 1
            if count_add % 3 == 0:
                s *= 1.03
            print(f'Остаток на счете - {s}')
        else:
            print('Введите сумму кратную 50')
    elif action == 'o':
        sum_out = int(input('Введите сумму снятия: '))
        if sum_out % 50 == 0:
            comission = sum_out * 0.015
            if comission < 30:
                comission = 30
            elif comission > 600:
                comission = 600
            if s - (sum_out + comission) < 0:
                print(f'Недостаточно средств, на счете {s}, сумма снятия {sum_out} + комиссия {comission}')
            else:
                s -= sum_out + comission
                count_out += 1
                if count_out % 3 == 0:
                    s *= 1.03
                print(f'Остаток на счете - {s}')
        else:
            print('Введите сумму кратную 50')
    else:
        print('Введите правильную команду: q - выход; a - пополнить; o - снять')
